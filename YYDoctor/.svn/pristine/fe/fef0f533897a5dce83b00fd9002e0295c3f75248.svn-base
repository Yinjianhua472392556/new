//
//  ConsultListController.m
//  YYDoctor
//
//  Created by MaxJmac on 15/10/14.
//  Copyright © 2015年 Guangdong ZSGR Technologies Co., Ltd. All rights reserved.
//

#import "ConsultListController.h"
#import <DZNEmptyDataSet/UIScrollView+EmptyDataSet.h>
#import "ConsultListCell.h"
#import "ChatController.h"

@interface ConsultListController ()
<UITableViewDataSource,UITableViewDelegate,DZNEmptyDataSetSource>

@property (nonatomic, weak) IBOutlet UITableView *tableView;
@property (weak, nonatomic) IBOutlet UIView *maskView;
@property (weak, nonatomic) IBOutlet UIView *popView;
@property (nonatomic, weak) IBOutlet UISegmentedControl *segmentControl;
@property (weak, nonatomic) IBOutlet UIView *bottomToolbar;
@property (weak, nonatomic) IBOutlet UIButton *bottomToolbarDeleteButton;

@property (nonatomic, assign) BOOL rightBarSelected;
@property (nonatomic, strong) NSMutableArray *dataSource;
@property (nonatomic, strong) NSMutableArray *freeDataSource;

@end

@implementation ConsultListController

#pragma mark - 

- (void)setupTestData {
    self.dataSource =     [@[@{@"headImage":@"TempHead",@"name":@"张三",@"history":@"啊哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"李四",@"history":@"[语音消息]"},
                             @{@"headImage":@"TempHead",@"name":@"王五",@"history":@"[图片]"},
                             @{@"headImage":@"TempHead",@"name":@"赵六",@"history":@"你好啊哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"朱七",@"history":@"嗯"},
                             @{@"headImage":@"TempHead",@"name":@"陈八",@"history":@"好的"},
                             @{@"headImage":@"TempHead",@"name":@"钱九",@"history":@"收到"},
                             @{@"headImage":@"TempHead",@"name":@"吴十",@"history":@"别这样"},] mutableCopy];
    
    self.freeDataSource = [@[@{@"headImage":@"TempHead",@"name":@"吴十",@"history":@"哈"},
                             @{@"headImage":@"TempHead",@"name":@"钱九",@"history":@"哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"陈八",@"history":@"哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"朱七",@"history":@"哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"赵六",@"history":@"哈哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"王五",@"history":@"哈哈哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"李四",@"history":@"哈哈哈哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"张三",@"history":@"哈哈哈哈哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"熊二",@"history":@"哈哈哈哈哈哈哈哈哈"},
                             @{@"headImage":@"TempHead",@"name":@"杜一",@"history":@"哈哈哈哈哈哈哈哈哈哈"},] mutableCopy];
}

- (IBAction)segmentControlClick:(UISegmentedControl *)sender {
    [self.tableView reloadData];
}

- (IBAction)rightBarClick:(UIBarButtonItem *)sender {
    self.rightBarSelected = !self.rightBarSelected;
    self.maskView.hidden = !self.maskView.hidden;
    self.popView.hidden = !self.popView.hidden;
}

#pragma mark - UITableView Delegation
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (self.segmentControl.selectedSegmentIndex == 0) {
        return self.dataSource.count;
    } else {
        return self.freeDataSource.count;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *reuseIdentifier = @"ConsultListCell";
    ConsultListCell *cell = [tableView dequeueReusableCellWithIdentifier:reuseIdentifier];
    cell.selectionStyle = UITableViewCellSelectionStyleBlue;

    NSDictionary *item;
    if (self.segmentControl.selectedSegmentIndex == 0) {
        item = self.dataSource[indexPath.row];
    }else {
        item = self.freeDataSource[indexPath.row];
    }
    NSString *imageName = item[@"headImage"];
    cell.headImageView.image = [UIImage imageNamed:imageName];
    cell.nameLabel.text = item[@"name"];
    cell.lastMessageLabel.text = item[@"history"];
    cell.lastTimeLabel.text = @"2014-19-10";
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (!tableView.isEditing) {
        ChatController *cc = [self.storyboard instantiateViewControllerWithIdentifier:NSStringFromClass([ChatController class])];
        NSDictionary *item;
        if (self.segmentControl.selectedSegmentIndex == 0) {
            item = self.dataSource[indexPath.row];
        }else {
            item = self.freeDataSource[indexPath.row];
        }
        cc.title = item[@"name"];
        [self.navigationController pushViewController:cc animated:YES];
    } else {
        if(self.tableView.indexPathsForSelectedRows.count != 0) {
            [self bottomToolbarDeleteButtonEnable];
        } else {

            [self bottomToolbarDeleteButtonDisable];
        }
    }

}


- (void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath {
    if(self.tableView.indexPathsForSelectedRows.count != 0) {
        [self bottomToolbarDeleteButtonEnable];

    } else {
        [self bottomToolbarDeleteButtonDisable];
    }
}

//是否可以打开编辑模式
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath{
    return YES;
}

#pragma mark - DZNEmptyDataSet

- (UIImage *)imageForEmptyDataSet:(UIScrollView *)scrollView {
    UIImage *image = [UIImage imageNamed:@"EmptyDataSet"];
    return image;
}

- (NSAttributedString *)titleForEmptyDataSet:(UIScrollView *)scrollView {
    NSDictionary *attributes = @{NSFontAttributeName:[UIFont systemFontOfSize:18.0f],
                                 NSForegroundColorAttributeName:[UIColor blackColor]};
    NSAttributedString *aString = [[NSAttributedString alloc] initWithString:@"暂无内容" attributes:attributes];
    return aString;
}

- (CGFloat)verticalOffsetForEmptyDataSet:(UIScrollView *)scrollView {
    return -100.0f;
}


#pragma mark - Action
- (IBAction)popViewSearchAction:(UIButton *)sender {
    NSLog(@"popViewSearchAction");
}

- (IBAction)popViewDeleteAction:(id)sender {
    //修改编辑状态
    BOOL editing = self.tableView.isEditing;
    [self.tableView setEditing:!editing animated:YES];
    if (!editing) { //非编辑状态时修改删除按钮的属性
        self.bottomToolbarDeleteButton.userInteractionEnabled = NO;
        self.bottomToolbarDeleteButton.titleLabel.textColor = [UIColor lightGrayColor];
    }
    self.maskView.hidden = !self.maskView.hidden;
    self.popView.hidden = !self.popView.hidden;
    self.bottomToolbar.hidden = !self.bottomToolbar.hidden;
    self.rightBarSelected = !self.rightBarSelected;
}
- (IBAction)bottomToolbarDeleteAction:(id)sender {
    if (self.tableView.isEditing) {
        NSArray *selectIndexPaths = self.tableView.indexPathsForSelectedRows;
        //创建一个数组用来存放所要删除的对象
        NSMutableArray *deleteData = [NSMutableArray array];
        //取出所要删除的对象
        if (self.segmentControl.selectedSegmentIndex == 0) {
            for (NSIndexPath *index in selectIndexPaths) {
                id data = self.dataSource[index.row];
                [deleteData addObject:data];
            }
            [self.dataSource removeObjectsInArray:deleteData];
        }else {
            for (NSIndexPath *index in selectIndexPaths) {
                id data = self.freeDataSource[index.row];
                [deleteData addObject:data];
            }
            [self.freeDataSource removeObjectsInArray:deleteData];
        }
        [self.tableView deleteRowsAtIndexPaths:selectIndexPaths withRowAnimation:UITableViewRowAnimationMiddle];
    }
}

- (IBAction)bottomToolbarChooseAllAction:(id)sender {
    if(self.tableView.isEditing) {
        NSArray *visibleRowPaths = self.tableView.indexPathsForVisibleRows;
        for (NSIndexPath *index in visibleRowPaths) {
            [self.tableView selectRowAtIndexPath:index animated:YES scrollPosition:UITableViewScrollPositionNone];
        }
        if (visibleRowPaths.count != 0) {
            [self bottomToolbarDeleteButtonEnable];

        }
    }
}
#pragma mark - private method
- (void)bottomToolbarDeleteButtonEnable {
    self.bottomToolbarDeleteButton.userInteractionEnabled = YES;
    self.bottomToolbarDeleteButton.titleLabel.textColor = [UIColor blueColor];
}

- (void)bottomToolbarDeleteButtonDisable {
    self.bottomToolbarDeleteButton.userInteractionEnabled = NO;
    self.bottomToolbarDeleteButton.titleLabel.textColor = [UIColor lightGrayColor];
}

#pragma mark - Lifetime

- (void)viewDidLoad {
    [super viewDidLoad];
    self.tableView.tableFooterView = [UIView new];
    self.tableView.allowsMultipleSelectionDuringEditing = YES;
    [self setupTestData];
    [self.tableView reloadData];
    self.rightBarSelected = NO;
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hideView)];
    [self.maskView addGestureRecognizer:tap];
}

- (void)hideView {
    self.maskView.hidden = !self.maskView.hidden;
    self.popView.hidden = !self.popView.hidden;
    self.rightBarSelected = !self.rightBarSelected;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

@end
